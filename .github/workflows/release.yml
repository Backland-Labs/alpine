name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: darwin
            arch: arm64
            suffix: darwin-arm64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o river-${{ matrix.suffix }} \
            cmd/river/main.go

      - name: Compress binary (non-Windows)
        if: matrix.os != 'windows'
        run: |
          tar -czf river-${{ matrix.suffix }}.tar.gz river-${{ matrix.suffix }}

      - name: Compress binary (Windows)
        if: matrix.os == 'windows'
        run: |
          zip river-${{ matrix.suffix }}.zip river-${{ matrix.suffix }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: river-${{ matrix.suffix }}
          path: |
            river-${{ matrix.suffix }}.tar.gz
            river-${{ matrix.suffix }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/river-darwin-arm64.tar.gz | tar xz
            sudo mv river-darwin-arm64 /usr/local/bin/river
            ```
            
            ### macOS (Intel)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/river-darwin-amd64.tar.gz | tar xz
            sudo mv river-darwin-amd64 /usr/local/bin/river
            ```
            
            ### Linux (x64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/river-linux-amd64.tar.gz | tar xz
            sudo mv river-linux-amd64 /usr/local/bin/river
            ```
            
            ### Linux (ARM64)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/river-linux-arm64.tar.gz | tar xz
            sudo mv river-linux-arm64 /usr/local/bin/river
            ```
            
            ### Windows
            Download and extract `river-windows-amd64.exe.zip`
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          generate_release_notes: true